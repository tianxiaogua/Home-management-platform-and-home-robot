/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "adc.h"
#include "dma.h"
#include "i2c.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"
#include "lcd.h"
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#ifdef __GNUC__
/* With GCC, small printf (option LD Linker->Libraries->Small printf
   set to 'Yes') calls __io_putchar() */
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
 
/* Private functions -------------------------------------------------*/
/* USER CODE END Includes */
PUTCHAR_PROTOTYPE
{
    HAL_UART_Transmit(&huart1 , (uint8_t *)&ch, 1, 0xFFFF);
    return ch;
}
/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
uint8_t aRxBuffer;   //接收中断缓冲
uint8_t Uart1_RxBuff[256];  //接收缓冲
uint8_t Uart1_Rx_Cnt = 0;  //接收缓冲计数
uint8_t Value[256];
uint16_t ADC1_Value;
uint8_t key_value_1;
uint8_t Value_Order;
//uint8_t cAlmStr[] = "数据溢出(大于256)\r\n";
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	uint16_t a,b,i,j;
  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART1_UART_Init();
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1); //开启接收中断，用来接收串口发送过来的信息
  /* USER CODE END 2 */
	HAL_Delay(500);
	
	printf("初始化led \r\n");
	Lcd_Init();			//初始化OLED  
	printf("设置背景 \r\n");
	LCD_Clear(BLACK);
	printf("设置颜色 \r\n");
	BACK_COLOR=BLACK;
	
	printf("初始化led \r\n");
	Lcd_Init();			//初始化OLED  
	printf("设置背景 \r\n");
	LCD_Clear(BLACK);
	printf("设置颜色 \r\n");
	BACK_COLOR=BLACK;
	
	//printf("写入文字1 \r\n");
	LCD_ShowChinese32x32(10,0,0,32,YELLOW);   //中
	LCD_ShowChinese32x32(45,0,1,32,YELLOW);   //景
	LCD_ShowChinese32x32(80,0,2,32,YELLOW);   //园
	LCD_ShowChinese32x32(115,0,3,32,YELLOW);  //电
	LCD_ShowChinese32x32(150,0,4,32,YELLOW);  //子
	printf("写入图片 \r\n");
	LCD_ShowPicture(0,50,100,100);
	HAL_Delay(200);
	LCD_ShowPicture(80,50,100,100);
	HAL_Delay(200);
	LCD_ShowPicture(80,100,100,100);
	HAL_Delay(200);
	LCD_ShowPicture(0,100,100,100);
	HAL_Delay(200);
	LCD_ShowPicture(0,50,100,100);
	
	Draw_Circle(50,50,30,YELLOW);
	a = 35;
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

			HAL_ADC_Start(&hadc1);
			HAL_ADC_PollForConversion(&hadc1, 10);
			  
			if(HAL_IS_BIT_SET(HAL_ADC_GetState(&hadc1), HAL_ADC_STATE_REG_EOC))
			{
				ADC1_Value = HAL_ADC_GetValue(&hadc1);
			}
		
			//HAL_Delay(50);

			
			if(Value_Order =='0') 
				{
					if(Value[1] == '0')
						{
							HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_SET);
						}
				
					else if(Value[1] =='1') 
						{	
							HAL_GPIO_WritePin(LED_0_GPIO_Port, LED_0_Pin, GPIO_PIN_RESET);
						}
				}
			else if(Value_Order =='1') 
				{	
					if(key_value_1 == 1)
						{				
							for(i=0;i<sizeof(Value);i++)
								{
									if(Value[i]== '\0')
										{
											Value[i-2] = Value[i];
										}
								}
							Value[0] = '>';
							a = LCD_ShowString(0,a,Value,YELLOW);	 
							key_value_1 = 0;
							printf("a:%d ,\r\n",i);
					}		
				}

			
		}
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
/*串口通讯部分*/
/*串口接收到的程序分为两部分，第一个字节是命令，后面的是数据
  1：控制LED0；
	2：控制OLED屏幕
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  uint8_t i=0;
  UNUSED(huart);
	
	Uart1_RxBuff[Uart1_Rx_Cnt++] = aRxBuffer;   //接收数据转存
 
	if((Uart1_RxBuff[Uart1_Rx_Cnt-1] == 0x0A)&&(Uart1_RxBuff[Uart1_Rx_Cnt-2] == 0x0D)) //判断结束位，判断数据的\r\n
	{
		/*接收的第一个字节是名利，用来控制不同的模块*/
		Value_Order = Uart1_RxBuff[0];
		/*如果使用value无法向外传递接收到字符串*/
		/*用Uart1_RxBuff的前两个字节存放名利，后面的字节存放数据
			数据包括文字数据和图片数据一起其他上位机发送给下位机的控制数据，数据内容不一定，
			*/
		for (i=0; i<sizeof(Uart1_RxBuff)-1; i++)
			{	
				Value[i] = Uart1_RxBuff[i]; 
			}
		
		printf("PA6 Voltage : %.4f \r\n",2*ADC1_Value*3.3f/4096);
		
		Uart1_Rx_Cnt = 0;
		
		memset(Uart1_RxBuff,0x00,sizeof(Uart1_RxBuff)); //清空数组
			
		/*表示接收到数据的标志，在主循环中是使用key_value_1来判判读接收到的数据*/
		key_value_1 = 1;
		
	}
	
 HAL_UART_Receive_IT(&huart1, (uint8_t *)&aRxBuffer, 1);   //再开启接收中断
 
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
